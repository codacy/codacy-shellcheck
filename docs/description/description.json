[
  {
    "patternId": "SC1000",
    "title": "`$` is not used specially and should therefore be escaped.",
    "description": "`$` is not used specially and should therefore be escaped."
  },
  {
    "patternId": "SC1001",
    "title": "This `\\o` will be a regular 'o' in this context.",
    "description": "This `\\o` will be a regular 'o' in this context."
  },
  {
    "patternId": "SC1003",
    "title": "Want to escape a single quote? `echo 'This is how it'\\''s done'`.",
    "description": "Want to escape a single quote? `echo 'This is how it'\\''s done'`."
  },
  {
    "patternId": "SC1007",
    "title": "Remove space after `=` if trying to assign a value (or for empty string, use `var=''` ... ).",
    "description": "Remove space after `=` if trying to assign a value (or for empty string, use `var=''` ... )."
  },
  {
    "patternId": "SC1008",
    "title": "This shebang was unrecognized. ShellCheck only supports sh/bash/dash/ksh. Add a 'shell' directive to specify.",
    "description": "This shebang was unrecognized. ShellCheck only supports sh/bash/dash/ksh. Add a 'shell' directive to specify."
  },
  {
    "patternId": "SC1009",
    "title": "The mentioned parser error was in ...",
    "description": "The mentioned parser error was in ..."
  },
  {
    "patternId": "SC1010",
    "title": "Use semicolon or linefeed before `done` (or quote to make it literal).\r",
    "description": "Use semicolon or linefeed before `done` (or quote to make it literal).\r"
  },
  {
    "patternId": "SC1011",
    "title": "This apostrophe terminated the single quoted string!",
    "description": "This apostrophe terminated the single quoted string!"
  },
  {
    "patternId": "SC1012",
    "title": "`\\t` is just literal `t` here. For tab, use `\"$(printf '\\t')\"` instead.",
    "description": "`\\t` is just literal `t` here. For tab, use `\"$(printf '\\t')\"` instead."
  },
  {
    "patternId": "SC1014",
    "title": "Use `if cmd; then ..` to check exit code, or `if [ \"$(cmd)\" = .. ]` to check output.",
    "description": "Use `if cmd; then ..` to check exit code, or `if [ \"$(cmd)\" = .. ]` to check output."
  },
  {
    "patternId": "SC1017",
    "title": "Literal carriage return. Run script through `tr -d '\\r'` .",
    "description": "Literal carriage return. Run script through `tr -d '\\r'` ."
  },
  {
    "patternId": "SC1018",
    "title": "This is a unicode non-breaking space. Delete it and retype as space.",
    "description": "This is a unicode non-breaking space. Delete it and retype as space."
  },
  {
    "patternId": "SC1019",
    "title": "Expected this to be an argument to the unary condition.",
    "description": "Expected this to be an argument to the unary condition."
  },
  {
    "patternId": "SC1020",
    "title": "You need a space before the `]` or `]]`",
    "description": "You need a space before the `]` or `]]`"
  },
  {
    "patternId": "SC1026",
    "title": "If grouping expressions inside `[[..]]`, use `( .. )`.",
    "description": "If grouping expressions inside `[[..]]`, use `( .. )`."
  },
  {
    "patternId": "SC1028",
    "title": "In `[..]` you have to escape `\\( \\)` or preferably combine `[..]` expressions.",
    "description": "In `[..]` you have to escape `\\( \\)` or preferably combine `[..]` expressions."
  },
  {
    "patternId": "SC1029",
    "title": "In `[[..]]` you shouldn't escape `(` or `)`.",
    "description": "In `[[..]]` you shouldn't escape `(` or `)`."
  },
  {
    "patternId": "SC1033",
    "title": "Test expression was opened with double `[[` but closed with single `]`. Make sure they match.",
    "description": "Test expression was opened with double `[[` but closed with single `]`. Make sure they match."
  },
  {
    "patternId": "SC1034",
    "title": "Test expression was opened with double `[` but closed with single `]]`. Make sure they match.",
    "description": "Test expression was opened with double `[` but closed with single `]]`. Make sure they match."
  },
  {
    "patternId": "SC1035",
    "title": "You need a space here",
    "description": "You need a space here"
  },
  {
    "patternId": "SC1036",
    "title": "`(` is invalid here. Did you forget to escape it?",
    "description": "`(` is invalid here. Did you forget to escape it?"
  },
  {
    "patternId": "SC1037",
    "title": "Braces are required for positionals over 9, e.g. `${10}`.",
    "description": "Braces are required for positionals over 9, e.g. `${10}`."
  },
  {
    "patternId": "SC1038",
    "title": "Shells are space sensitive. Use `< <(cmd)`, not `<<(cmd)`.",
    "description": "Shells are space sensitive. Use `< <(cmd)`, not `<<(cmd)`."
  },
  {
    "patternId": "SC1039",
    "title": "Remove indentation before end token (or use `<<-` and indent with tabs).",
    "description": "Remove indentation before end token (or use `<<-` and indent with tabs)."
  },
  {
    "patternId": "SC1040",
    "title": "When using `<<-`, you can only indent with tabs.",
    "description": "When using `<<-`, you can only indent with tabs."
  },
  {
    "patternId": "SC1041",
    "title": "Found `eof` further down, but not on a separate line.",
    "description": "Found `eof` further down, but not on a separate line."
  },
  {
    "patternId": "SC1042",
    "title": "Close matches include `-eof` (!= `eof`).",
    "description": "Close matches include `-eof` (!= `eof`)."
  },
  {
    "patternId": "SC1044",
    "title": "Couldn't find end token `EOF` in the here document.",
    "description": "Couldn't find end token `EOF` in the here document."
  },
  {
    "patternId": "SC1045",
    "title": "It's not `foo &; bar`, just `foo & bar`.",
    "description": "It's not `foo &; bar`, just `foo & bar`."
  },
  {
    "patternId": "SC1046",
    "title": "Couldn't find `fi` for this `if`.",
    "description": "Couldn't find `fi` for this `if`."
  },
  {
    "patternId": "SC1047",
    "title": "Expected `fi` matching previously mentioned `if`.",
    "description": "Expected `fi` matching previously mentioned `if`."
  },
  {
    "patternId": "SC1048",
    "title": "Can't have empty then clauses (use `true` as a no-op).",
    "description": "Can't have empty then clauses (use `true` as a no-op)."
  },
  {
    "patternId": "SC1049",
    "title": "Did you forget the `then` for this `if`?",
    "description": "Did you forget the `then` for this `if`?"
  },
  {
    "patternId": "SC1050",
    "title": "Expected `then`.",
    "description": "Expected `then`."
  },
  {
    "patternId": "SC1051",
    "title": "Semicolons directly after `then` are not allowed. Just remove it.",
    "description": "Semicolons directly after `then` are not allowed. Just remove it."
  },
  {
    "patternId": "SC1052",
    "title": "Semicolons directly after `then` are not allowed. Just remove it.",
    "description": "Semicolons directly after `then` are not allowed. Just remove it."
  },
  {
    "patternId": "SC1053",
    "title": "Semicolons directly after `else` are not allowed. Just remove it.",
    "description": "Semicolons directly after `else` are not allowed. Just remove it."
  },
  {
    "patternId": "SC1054",
    "title": "You need a space after the `{`.",
    "description": "You need a space after the `{`."
  },
  {
    "patternId": "SC1056",
    "title": "Expected a `}`. If you have one, try a `;` or `\\n` in front of it.",
    "description": "Expected a `}`. If you have one, try a `;` or `\\n` in front of it."
  },
  {
    "patternId": "SC1058",
    "title": "Expected `do`.",
    "description": "Expected `do`."
  },
  {
    "patternId": "SC1061",
    "title": "Couldn't find `done` for this `do`.",
    "description": "Couldn't find `done` for this `do`."
  },
  {
    "patternId": "SC1062",
    "title": "Expected `done` matching previously mentioned `do`.",
    "description": "Expected `done` matching previously mentioned `do`."
  },
  {
    "patternId": "SC1064",
    "title": "Expected a `{` to open the function definition.",
    "description": "Expected a `{` to open the function definition."
  },
  {
    "patternId": "SC1065",
    "title": "Trying to declare parameters? Don't. Use `()` and refer to params as `$1`, `$2`, ..",
    "description": "Trying to declare parameters? Don't. Use `()` and refer to params as `$1`, `$2`, .."
  },
  {
    "patternId": "SC1066",
    "title": "Don't use `$` on the left side of assignments.",
    "description": "Don't use `$` on the left side of assignments."
  },
  {
    "patternId": "SC1069",
    "title": "You need a space before the `[`.",
    "description": "You need a space before the `[`."
  },
  {
    "patternId": "SC1070",
    "title": "Parsing stopped here. Mismatched keywords or invalid parentheses?",
    "description": "Parsing stopped here. Mismatched keywords or invalid parentheses?"
  },
  {
    "patternId": "SC1071",
    "title": "ShellCheck only supports sh/bash/dash/ksh scripts. Sorry!",
    "description": "ShellCheck only supports sh/bash/dash/ksh scripts. Sorry!"
  },
  {
    "patternId": "SC1072",
    "title": "Unexpected ..",
    "description": "Unexpected .."
  },
  {
    "patternId": "SC1073",
    "title": "Couldn't parse this (thing). Fix to allow more checks.",
    "description": "Couldn't parse this (thing). Fix to allow more checks."
  },
  {
    "patternId": "SC1074",
    "title": "Did you forget the `;;` after the previous case item?",
    "description": "Did you forget the `;;` after the previous case item?"
  },
  {
    "patternId": "SC1075",
    "title": "Use `elif` instead of `else if`.",
    "description": "Use `elif` instead of `else if`."
  },
  {
    "patternId": "SC1077",
    "title": "For command expansion, the tick should slant left (`` ` `` vs `´`).",
    "description": "For command expansion, the tick should slant left (`` ` `` vs `´`)."
  },
  {
    "patternId": "SC1078",
    "title": "Did you forget to close this double quoted string?",
    "description": "Did you forget to close this double quoted string?"
  },
  {
    "patternId": "SC1079",
    "title": "This is actually an end quote, but due to next char it looks suspect.",
    "description": "This is actually an end quote, but due to next char it looks suspect."
  },
  {
    "patternId": "SC1081",
    "title": "Scripts are case sensitive. Use `if`, not `If`.",
    "description": "Scripts are case sensitive. Use `if`, not `If`."
  },
  {
    "patternId": "SC1082",
    "title": "This file has a UTF-8 BOM. Remove it with: `LC_CTYPE=C sed '1s/^...//' < yourscript`.",
    "description": "This file has a UTF-8 BOM. Remove it with: `LC_CTYPE=C sed '1s/^...//' < yourscript`."
  },
  {
    "patternId": "SC1083",
    "title": "This `{`/`}` is literal. Check if `;` is missing or quote the expression.",
    "description": "This `{`/`}` is literal. Check if `;` is missing or quote the expression."
  },
  {
    "patternId": "SC1084",
    "title": "Use `#!`, not `!#`, for the shebang.",
    "description": "Use `#!`, not `!#`, for the shebang."
  },
  {
    "patternId": "SC1086",
    "title": "Don't use `$` on the iterator name in for loops.",
    "description": "Don't use `$` on the iterator name in for loops."
  },
  {
    "patternId": "SC1087",
    "title": "Use braces when expanding arrays, e.g. `${array[idx]}` (or `${var}[..` to quiet).",
    "description": "Use braces when expanding arrays, e.g. `${array[idx]}` (or `${var}[..` to quiet)."
  },
  {
    "patternId": "SC1088",
    "title": "Parsing stopped here. Invalid use of parentheses?",
    "description": "Parsing stopped here. Invalid use of parentheses?"
  },
  {
    "patternId": "SC1089",
    "title": "Parsing stopped here. Is this keyword correctly matched up?",
    "description": "Parsing stopped here. Is this keyword correctly matched up?"
  },
  {
    "patternId": "SC1090",
    "title": "Can't follow non-constant source. Use a directive to specify location.",
    "description": "Can't follow non-constant source. Use a directive to specify location."
  },
  {
    "patternId": "SC1091",
    "title": "Not following: (error message here)",
    "description": "Not following: (error message here)"
  },
  {
    "patternId": "SC1094",
    "title": "Parsing of sourced file failed. Ignoring it.",
    "description": "Parsing of sourced file failed. Ignoring it."
  },
  {
    "patternId": "SC1095",
    "title": "You need a space or linefeed between the function name and body.",
    "description": "You need a space or linefeed between the function name and body."
  },
  {
    "patternId": "SC1097",
    "title": "Unexpected `==`. For assignment, use `=`. For comparison, use `[`/`[[`.",
    "description": "Unexpected `==`. For assignment, use `=`. For comparison, use `[`/`[[`."
  },
  {
    "patternId": "SC1098",
    "title": "Quote/escape special characters when using `eval`, e.g. `eval \"a=(b)\"`.",
    "description": "Quote/escape special characters when using `eval`, e.g. `eval \"a=(b)\"`."
  },
  {
    "patternId": "SC1099",
    "title": "You need a space before the `#`.",
    "description": "You need a space before the `#`."
  },
  {
    "patternId": "SC1100",
    "title": "This is a unicode dash. Delete and retype as ASCII minus.",
    "description": "This is a unicode dash. Delete and retype as ASCII minus."
  },
  {
    "patternId": "SC1101",
    "title": "Delete trailing spaces after `\\` to break line (or use quotes for literal space).",
    "description": "Delete trailing spaces after `\\` to break line (or use quotes for literal space)."
  },
  {
    "patternId": "SC1102",
    "title": "Shells disambiguate `$((` differently or not at all. For `$(command substition)`, add space after `$(` . For `$((arithmetics))`, fix parsing errors.",
    "description": "Shells disambiguate `$((` differently or not at all. For `$(command substition)`, add space after `$(` . For `$((arithmetics))`, fix parsing errors."
  },
  {
    "patternId": "SC1104",
    "title": "Use `#!`, not just `!`, for the shebang.",
    "description": "Use `#!`, not just `!`, for the shebang."
  },
  {
    "patternId": "SC1105",
    "title": "Shells disambiguate `((` differently or not at all. If the first `(` should start a subshell, add a space after it.",
    "description": "Shells disambiguate `((` differently or not at all. If the first `(` should start a subshell, add a space after it."
  },
  {
    "patternId": "SC1106",
    "title": "In arithmetic contexts, use `<` instead of `-lt`",
    "description": "In arithmetic contexts, use `<` instead of `-lt`"
  },
  {
    "patternId": "SC1107",
    "title": "This directive is unknown. It will be ignored.",
    "description": "This directive is unknown. It will be ignored."
  },
  {
    "patternId": "SC1108",
    "title": "You need a space before and after the `=` .",
    "description": "You need a space before and after the `=` ."
  },
  {
    "patternId": "SC1109",
    "title": "This is an unquoted HTML entity. Replace with corresponding character.",
    "description": "This is an unquoted HTML entity. Replace with corresponding character."
  },
  {
    "patternId": "SC1110",
    "title": "This is a unicode quote. Delete and retype it (or quote to make literal).",
    "description": "This is a unicode quote. Delete and retype it (or quote to make literal)."
  },
  {
    "patternId": "SC1111",
    "title": "This is a unicode quote. Delete and retype it (or ignore/singlequote for literal).",
    "description": "This is a unicode quote. Delete and retype it (or ignore/singlequote for literal)."
  },
  {
    "patternId": "SC1112",
    "title": "This is a unicode quote. Delete and retype it (or ignore/doublequote for literal).",
    "description": "This is a unicode quote. Delete and retype it (or ignore/doublequote for literal)."
  },
  {
    "patternId": "SC1113",
    "title": "Use `#!`, not just `#`, for the shebang.",
    "description": "Use `#!`, not just `#`, for the shebang."
  },
  {
    "patternId": "SC1114",
    "title": "Remove leading spaces before the shebang.",
    "description": "Remove leading spaces before the shebang."
  },
  {
    "patternId": "SC1115",
    "title": "Remove spaces between `#` and `!` in the shebang.",
    "description": "Remove spaces between `#` and `!` in the shebang."
  },
  {
    "patternId": "SC1116",
    "title": "Missing `$` on a `$((..))` expression? (or use `( (` for arrays).",
    "description": "Missing `$` on a `$((..))` expression? (or use `( (` for arrays)."
  },
  {
    "patternId": "SC1117",
    "title": "Backslash is literal in `\"\\n\"`. Prefer explicit escaping: `\"\\\\n\"`.",
    "description": "Backslash is literal in `\"\\n\"`. Prefer explicit escaping: `\"\\\\n\"`."
  },
  {
    "patternId": "SC1118",
    "title": "Delete whitespace after the here-doc end token.",
    "description": "Delete whitespace after the here-doc end token."
  },
  {
    "patternId": "SC1119",
    "title": "Add a linefeed between end token and terminating `)`.",
    "description": "Add a linefeed between end token and terminating `)`."
  },
  {
    "patternId": "SC1120",
    "title": "No comments allowed after here-doc token. Comment the next line instead.",
    "description": "No comments allowed after here-doc token. Comment the next line instead."
  },
  {
    "patternId": "SC1121",
    "title": "Add `;`/`&` terminators (and other syntax) on the line with the `<<`, not here.",
    "description": "Add `;`/`&` terminators (and other syntax) on the line with the `<<`, not here."
  },
  {
    "patternId": "SC1122",
    "title": "Nothing allowed after end token. To continue a command, put it on the line with the `<<`.",
    "description": "Nothing allowed after end token. To continue a command, put it on the line with the `<<`."
  },
  {
    "patternId": "SC1123",
    "title": "ShellCheck directives are only valid in front of complete compound commands, like `if`, not e.g. individual `elif` branches.",
    "description": "ShellCheck directives are only valid in front of complete compound commands, like `if`, not e.g. individual `elif` branches."
  },
  {
    "patternId": "SC1124",
    "title": "ShellCheck directives are only valid in front of complete commands like `case` statements, not individual case branches.",
    "description": "ShellCheck directives are only valid in front of complete commands like `case` statements, not individual case branches."
  },
  {
    "patternId": "SC1125",
    "title": "Invalid `key=value` pair in directive",
    "description": "Invalid `key=value` pair in directive"
  },
  {
    "patternId": "SC1126",
    "title": "Place shellcheck directives before commands, not after.",
    "description": "Place shellcheck directives before commands, not after."
  },
  {
    "patternId": "SC1127",
    "title": "Was this intended as a comment? Use `#` in sh.",
    "description": "Was this intended as a comment? Use `#` in sh."
  },
  {
    "patternId": "SC1128",
    "title": "The shebang must be on the first line. Delete blanks and move comments.",
    "description": "The shebang must be on the first line. Delete blanks and move comments."
  },
  {
    "patternId": "SC1129",
    "title": "You need a space before the `!`.",
    "description": "You need a space before the `!`."
  },
  {
    "patternId": "SC1130",
    "title": "You need a space before the :.",
    "description": "You need a space before the :."
  },
  {
    "patternId": "SC1131",
    "title": "Use `elif` to start another branch.",
    "description": "Use `elif` to start another branch."
  },
  {
    "patternId": "SC1132",
    "title": "This `&` terminates the command. Escape it or add space after `&` to silence.",
    "description": "This `&` terminates the command. Escape it or add space after `&` to silence."
  },
  {
    "patternId": "SC1133",
    "title": "Unexpected start of line. If breaking lines, `|`/`||`/`&&` should be at the end of the previous one.",
    "description": "Unexpected start of line. If breaking lines, `|`/`||`/`&&` should be at the end of the previous one."
  },
  {
    "patternId": "SC1134",
    "title": "Error parsing `shellcheckrc`:",
    "description": "Error parsing `shellcheckrc`:"
  },
  {
    "patternId": "SC1135",
    "title": "Prefer escape over ending quote to make `$` literal. Instead of `\"It costs $\"5`, use `\"It costs \\$5\"`",
    "description": "Prefer escape over ending quote to make `$` literal. Instead of `\"It costs $\"5`, use `\"It costs \\$5\"`"
  },
  {
    "patternId": "SC1139",
    "title": "Use `||` instead of `-o` between test commands.",
    "description": "Use `||` instead of `-o` between test commands."
  },
  {
    "patternId": "SC1140",
    "title": "Unexpected parameters after condition. Missing `&&`/`||`, or bad expression?",
    "description": "Unexpected parameters after condition. Missing `&&`/`||`, or bad expression?"
  },
  {
    "patternId": "SC1141",
    "title": "Unexpected tokens after compound command. Bad redirection or missing `;`/`&&`/`||`/`|`?",
    "description": "Unexpected tokens after compound command. Bad redirection or missing `;`/`&&`/`||`/`|`?"
  },
  {
    "patternId": "SC1142",
    "title": "Use `done < <(cmd)` to redirect from process substitution (currently missing one `<`).",
    "description": "Use `done < <(cmd)` to redirect from process substitution (currently missing one `<`)."
  },
  {
    "patternId": "SC1143",
    "title": "This backslash is part of a comment and does not continue the line.",
    "description": "This backslash is part of a comment and does not continue the line."
  },
  {
    "patternId": "SC2000",
    "title": "See if you can use `${#variable}` instead",
    "description": "See if you can use `${#variable}` instead"
  },
  {
    "patternId": "SC2001",
    "title": "See if you can use `${variable//search/replace}` instead.",
    "description": "See if you can use `${variable//search/replace}` instead."
  },
  {
    "patternId": "SC2002",
    "title": "Useless cat. Consider `cmd < file | ..` or `cmd file | ..` instead.",
    "description": "Useless cat. Consider `cmd < file | ..` or `cmd file | ..` instead."
  },
  {
    "patternId": "SC2003",
    "title": "expr is antiquated. Consider rewriting this using `$((..))`, `${}` or `[[  ]]`.",
    "description": "expr is antiquated. Consider rewriting this using `$((..))`, `${}` or `[[  ]]`."
  },
  {
    "patternId": "SC2004",
    "title": "`$`/`${}` is unnecessary on arithmetic variables.",
    "description": "`$`/`${}` is unnecessary on arithmetic variables."
  },
  {
    "patternId": "SC2005",
    "title": "Useless `echo`? Instead of `echo $(cmd)`, just use `cmd`",
    "description": "Useless `echo`? Instead of `echo $(cmd)`, just use `cmd`"
  },
  {
    "patternId": "SC2006",
    "title": "Use `$(...)` notation instead of legacy backticked `` `...` ``.",
    "description": "Use `$(...)` notation instead of legacy backticked `` `...` ``."
  },
  {
    "patternId": "SC2007",
    "title": "Use `$((..))` instead of deprecated `$[..]`.",
    "description": "Use `$((..))` instead of deprecated `$[..]`."
  },
  {
    "patternId": "SC2009",
    "title": "Consider using `pgrep` instead of grepping `ps` output.",
    "description": "Consider using `pgrep` instead of grepping `ps` output."
  },
  {
    "patternId": "SC2010",
    "title": "Don't use `ls | grep`. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.",
    "description": "Don't use `ls | grep`. Use a glob or a for loop with a condition to allow non-alphanumeric filenames."
  },
  {
    "patternId": "SC2011",
    "title": "Use `find -print0` or `find -exec` to better handle non-alphanumeric filenames.",
    "description": "Use `find -print0` or `find -exec` to better handle non-alphanumeric filenames."
  },
  {
    "patternId": "SC2012",
    "title": "Use `find` instead of `ls` to better handle non-alphanumeric filenames.",
    "description": "Use `find` instead of `ls` to better handle non-alphanumeric filenames."
  },
  {
    "patternId": "SC2013",
    "title": "To read lines rather than words, pipe/redirect to a `while read` loop.",
    "description": "To read lines rather than words, pipe/redirect to a `while read` loop."
  },
  {
    "patternId": "SC2014",
    "title": "This will expand once before find runs, not per file found.",
    "description": "This will expand once before find runs, not per file found."
  },
  {
    "patternId": "SC2015",
    "title": "Note that `A && B || C` is not if-then-else. C may run when A is true.",
    "description": "Note that `A && B || C` is not if-then-else. C may run when A is true."
  },
  {
    "patternId": "SC2016",
    "title": "Expressions don't expand in single quotes, use double quotes for that.",
    "description": "Expressions don't expand in single quotes, use double quotes for that."
  },
  {
    "patternId": "SC2017",
    "title": "Increase precision by replacing `a/b*c` with `a*c/b`.",
    "description": "Increase precision by replacing `a/b*c` with `a*c/b`."
  },
  {
    "patternId": "SC2018",
    "title": "Use `[:lower:]` to support accents and foreign alphabets.",
    "description": "Use `[:lower:]` to support accents and foreign alphabets."
  },
  {
    "patternId": "SC2019",
    "title": "Use `[:upper:]` to support accents and foreign alphabets.",
    "description": "Use `[:upper:]` to support accents and foreign alphabets."
  },
  {
    "patternId": "SC2020",
    "title": "`tr` replaces sets of chars, not words (mentioned due to duplicates).",
    "description": "`tr` replaces sets of chars, not words (mentioned due to duplicates)."
  },
  {
    "patternId": "SC2021",
    "title": "Don't use `[]` around ranges in `tr`, it replaces literal square brackets.",
    "description": "Don't use `[]` around ranges in `tr`, it replaces literal square brackets."
  },
  {
    "patternId": "SC2022",
    "title": "Note that unlike globs, `o*` here matches `ooo` but not `oscar`.",
    "description": "Note that unlike globs, `o*` here matches `ooo` but not `oscar`."
  },
  {
    "patternId": "SC2023",
    "title": "The shell may override 'time' as seen in man time(1). Use 'command time ..' for that one.",
    "description": "The shell may override 'time' as seen in man time(1). Use 'command time ..' for that one."
  },
  {
    "patternId": "SC2024",
    "title": "`sudo` doesn't affect redirects. Use `..| sudo tee file`\r",
    "description": "`sudo` doesn't affect redirects. Use `..| sudo tee file`\r"
  },
  {
    "patternId": "SC2025",
    "title": "Make sure all escape sequences are enclosed in `\\[..\\]` to prevent line wrapping issues.",
    "description": "Make sure all escape sequences are enclosed in `\\[..\\]` to prevent line wrapping issues."
  },
  {
    "patternId": "SC2026",
    "title": "This word is outside of quotes. Did you intend to `'nest '\"'single quotes'\"'` instead'?",
    "description": "This word is outside of quotes. Did you intend to `'nest '\"'single quotes'\"'` instead'?"
  },
  {
    "patternId": "SC2027",
    "title": "The surrounding quotes actually unquote this. Remove or escape them.",
    "description": "The surrounding quotes actually unquote this. Remove or escape them."
  },
  {
    "patternId": "SC2028",
    "title": "`echo` won't expand escape sequences. Consider `printf`.",
    "description": "`echo` won't expand escape sequences. Consider `printf`."
  },
  {
    "patternId": "SC2029",
    "title": "Note that, unescaped, this expands on the client side.",
    "description": "Note that, unescaped, this expands on the client side."
  },
  {
    "patternId": "SC2030",
    "title": "Modification of var is local (to subshell caused by pipeline).",
    "description": "Modification of var is local (to subshell caused by pipeline)."
  },
  {
    "patternId": "SC2031",
    "title": "var was modified in a subshell. That change might be lost.",
    "description": "var was modified in a subshell. That change might be lost."
  },
  {
    "patternId": "SC2032",
    "title": "This function can't be invoked via su on line 42.",
    "description": "This function can't be invoked via su on line 42."
  },
  {
    "patternId": "SC2033",
    "title": "Shell functions can't be passed to external commands. Use separate script or sh -c.",
    "description": "Shell functions can't be passed to external commands. Use separate script or sh -c."
  },
  {
    "patternId": "SC2034",
    "title": "!/usr/bin/env bash",
    "description": "!/usr/bin/env bash"
  },
  {
    "patternId": "SC2034",
    "title": "foo appears unused. Verify it or export it.",
    "description": "foo appears unused. Verify it or export it."
  },
  {
    "patternId": "SC2035",
    "title": "Use `./*glob*` or `-- *glob*` so names with dashes won't become options.",
    "description": "Use `./*glob*` or `-- *glob*` so names with dashes won't become options."
  },
  {
    "patternId": "SC2036",
    "title": "If you wanted to assign the output of the pipeline, use `a=$(b | c)` .",
    "description": "If you wanted to assign the output of the pipeline, use `a=$(b | c)` ."
  },
  {
    "patternId": "SC2037",
    "title": "To assign the output of a command, use `var=$(cmd)` .",
    "description": "To assign the output of a command, use `var=$(cmd)` ."
  },
  {
    "patternId": "SC2038",
    "title": "Use `-print0`/`-0` or `find -exec +` to allow for non-alphanumeric filenames.",
    "description": "Use `-print0`/`-0` or `find -exec +` to allow for non-alphanumeric filenames."
  },
  {
    "patternId": "SC2041",
    "title": "This is a literal string. To run as a command, use `$(..)` instead of `'..'` .",
    "description": "This is a literal string. To run as a command, use `$(..)` instead of `'..'` ."
  },
  {
    "patternId": "SC2043",
    "title": "This loop will only ever run once for a constant value. Did you perhaps mean to loop over `dir/*`, `$var` or `$(cmd)`?",
    "description": "This loop will only ever run once for a constant value. Did you perhaps mean to loop over `dir/*`, `$var` or `$(cmd)`?"
  },
  {
    "patternId": "SC2044",
    "title": "For loops over find output are fragile. Use `find -exec` or a `while read` loop.",
    "description": "For loops over find output are fragile. Use `find -exec` or a `while read` loop."
  },
  {
    "patternId": "SC2045",
    "title": "Iterating over ls output is fragile. Use globs.",
    "description": "Iterating over ls output is fragile. Use globs."
  },
  {
    "patternId": "SC2046",
    "title": "Quote this to prevent word splitting.",
    "description": "Quote this to prevent word splitting."
  },
  {
    "patternId": "SC2048",
    "title": "Use `\"$@\"` (with quotes) to prevent whitespace problems.",
    "description": "Use `\"$@\"` (with quotes) to prevent whitespace problems."
  },
  {
    "patternId": "SC2049",
    "title": "`=~` is for regex, but this looks like a glob. Use `=` instead.",
    "description": "`=~` is for regex, but this looks like a glob. Use `=` instead."
  },
  {
    "patternId": "SC2050",
    "title": "This expression is constant. Did you forget the `$` on a variable?",
    "description": "This expression is constant. Did you forget the `$` on a variable?"
  },
  {
    "patternId": "SC2051",
    "title": "Bash doesn't support variables in brace range expansions.\r",
    "description": "Bash doesn't support variables in brace range expansions.\r"
  },
  {
    "patternId": "SC2053",
    "title": "Quote the rhs of `=` in `[[ ]]` to prevent glob matching.",
    "description": "Quote the rhs of `=` in `[[ ]]` to prevent glob matching."
  },
  {
    "patternId": "SC2054",
    "title": "Use spaces, not commas, to separate array elements.",
    "description": "Use spaces, not commas, to separate array elements."
  },
  {
    "patternId": "SC2055",
    "title": "You probably wanted `&&` here, otherwise it's always true.",
    "description": "You probably wanted `&&` here, otherwise it's always true."
  },
  {
    "patternId": "SC2056",
    "title": "You probably wanted `&&` here",
    "description": "You probably wanted `&&` here"
  },
  {
    "patternId": "SC2057",
    "title": "Unknown binary operator.",
    "description": "Unknown binary operator."
  },
  {
    "patternId": "SC2058",
    "title": "Unknown unary operator.",
    "description": "Unknown unary operator."
  },
  {
    "patternId": "SC2059",
    "title": "Don't use variables in the `printf` format string. Use `printf \"..%s..\" \"$foo\"`.",
    "description": "Don't use variables in the `printf` format string. Use `printf \"..%s..\" \"$foo\"`."
  },
  {
    "patternId": "SC2060",
    "title": "Quote parameters to tr to prevent glob expansion.",
    "description": "Quote parameters to tr to prevent glob expansion."
  },
  {
    "patternId": "SC2061",
    "title": "Quote the parameter to `-name` so the shell won't interpret it.",
    "description": "Quote the parameter to `-name` so the shell won't interpret it."
  },
  {
    "patternId": "SC2062",
    "title": "Quote the grep pattern so the shell won't interpret it.",
    "description": "Quote the grep pattern so the shell won't interpret it."
  },
  {
    "patternId": "SC2063",
    "title": "Grep uses regex, but this looks like a glob.",
    "description": "Grep uses regex, but this looks like a glob."
  },
  {
    "patternId": "SC2064",
    "title": "Use single quotes, otherwise this expands now rather than when signalled.",
    "description": "Use single quotes, otherwise this expands now rather than when signalled."
  },
  {
    "patternId": "SC2065",
    "title": "This is interpreted as a shell file redirection, not a comparison.",
    "description": "This is interpreted as a shell file redirection, not a comparison."
  },
  {
    "patternId": "SC2066",
    "title": "Since you double quoted this, it will not word split, and the loop will only run once.",
    "description": "Since you double quoted this, it will not word split, and the loop will only run once."
  },
  {
    "patternId": "SC2067",
    "title": "Missing `;` or `+` terminating `-exec`. You can't use `|`/`||`/`&&`, and `;` has to be a separate, quoted argument.",
    "description": "Missing `;` or `+` terminating `-exec`. You can't use `|`/`||`/`&&`, and `;` has to be a separate, quoted argument."
  },
  {
    "patternId": "SC2068",
    "title": "Double quote array expansions to avoid re-splitting elements.",
    "description": "Double quote array expansions to avoid re-splitting elements."
  },
  {
    "patternId": "SC2069",
    "title": "To redirect stdout+stderr, `2>&1` must be last (or use `{ cmd > file; } 2>&1` to clarify).",
    "description": "To redirect stdout+stderr, `2>&1` must be last (or use `{ cmd > file; } 2>&1` to clarify)."
  },
  {
    "patternId": "SC2070",
    "title": "`-n` doesn't work with unquoted arguments. Quote or use `[[ ]]`.",
    "description": "`-n` doesn't work with unquoted arguments. Quote or use `[[ ]]`."
  },
  {
    "patternId": "SC2071",
    "title": "`>` is for string comparisons. Use `-gt` instead.",
    "description": "`>` is for string comparisons. Use `-gt` instead."
  },
  {
    "patternId": "SC2072",
    "title": "Decimals are not supported. Either use integers only, or use `bc` or `awk` to compare.",
    "description": "Decimals are not supported. Either use integers only, or use `bc` or `awk` to compare."
  },
  {
    "patternId": "SC2073",
    "title": "Escape `\\<` to prevent it redirecting (or switch to `[[ .. ]]`).",
    "description": "Escape `\\<` to prevent it redirecting (or switch to `[[ .. ]]`)."
  },
  {
    "patternId": "SC2074",
    "title": "Can't use `=~` in `[ ]`. Use `[[..]]` instead.",
    "description": "Can't use `=~` in `[ ]`. Use `[[..]]` instead."
  },
  {
    "patternId": "SC2076",
    "title": "Don't quote rhs of `=~`, it'll match literally rather than as a regex.",
    "description": "Don't quote rhs of `=~`, it'll match literally rather than as a regex."
  },
  {
    "patternId": "SC2077",
    "title": "You need spaces around the comparison operator.",
    "description": "You need spaces around the comparison operator."
  },
  {
    "patternId": "SC2078",
    "title": "This expression is constant. Did you forget a `$` somewhere?",
    "description": "This expression is constant. Did you forget a `$` somewhere?"
  },
  {
    "patternId": "SC2079",
    "title": "`(( ))` doesn't support decimals. Use `bc` or `awk`.",
    "description": "`(( ))` doesn't support decimals. Use `bc` or `awk`."
  },
  {
    "patternId": "SC2080",
    "title": "Numbers with leading 0 are considered octal.",
    "description": "Numbers with leading 0 are considered octal."
  },
  {
    "patternId": "SC2081",
    "title": "`[ .. ]` can't match globs. Use `[[ .. ]]` or grep.",
    "description": "`[ .. ]` can't match globs. Use `[[ .. ]]` or grep."
  },
  {
    "patternId": "SC2082",
    "title": "To expand via indirection, use `name=\"foo$n\"; echo \"${!name}\"`.",
    "description": "To expand via indirection, use `name=\"foo$n\"; echo \"${!name}\"`."
  },
  {
    "patternId": "SC2084",
    "title": "Remove `$` or use `_=$((expr))` to avoid executing output.",
    "description": "Remove `$` or use `_=$((expr))` to avoid executing output."
  },
  {
    "patternId": "SC2086",
    "title": "Double quote to prevent globbing and word splitting.",
    "description": "Double quote to prevent globbing and word splitting."
  },
  {
    "patternId": "SC2087",
    "title": "Quote `EOF` to make here document expansions happen on the server side rather than on the client.",
    "description": "Quote `EOF` to make here document expansions happen on the server side rather than on the client."
  },
  {
    "patternId": "SC2088",
    "title": "Tilde does not expand in quotes. Use `$HOME`.",
    "description": "Tilde does not expand in quotes. Use `$HOME`."
  },
  {
    "patternId": "SC2089",
    "title": "Quotes/backslashes will be treated literally. Use an array.",
    "description": "Quotes/backslashes will be treated literally. Use an array."
  },
  {
    "patternId": "SC2090",
    "title": "Quotes/backslashes in this variable will not be respected.",
    "description": "Quotes/backslashes in this variable will not be respected."
  },
  {
    "patternId": "SC2091",
    "title": "Remove surrounding `$()` to avoid executing output (or use `eval` if intentional).",
    "description": "Remove surrounding `$()` to avoid executing output (or use `eval` if intentional)."
  },
  {
    "patternId": "SC2092",
    "title": "Remove backticks to avoid executing output.",
    "description": "Remove backticks to avoid executing output."
  },
  {
    "patternId": "SC2093",
    "title": "Remove `exec ` if script should continue after this command.",
    "description": "Remove `exec ` if script should continue after this command."
  },
  {
    "patternId": "SC2094",
    "title": "Make sure not to read and write the same file in the same pipeline.",
    "description": "Make sure not to read and write the same file in the same pipeline."
  },
  {
    "patternId": "SC2095",
    "title": "Use `ssh -n` to prevent ssh from swallowing stdin.",
    "description": "Use `ssh -n` to prevent ssh from swallowing stdin."
  },
  {
    "patternId": "SC2096",
    "title": "On most OS, shebangs can only specify a single parameter.",
    "description": "On most OS, shebangs can only specify a single parameter."
  },
  {
    "patternId": "SC2097",
    "title": "This assignment is only seen by the forked process.",
    "description": "This assignment is only seen by the forked process."
  },
  {
    "patternId": "SC2098",
    "title": "This expansion will not see the mentioned assignment.",
    "description": "This expansion will not see the mentioned assignment."
  },
  {
    "patternId": "SC2099",
    "title": "Use `$((..))` for arithmetics, e.g. `i=$((i + 2))`",
    "description": "Use `$((..))` for arithmetics, e.g. `i=$((i + 2))`"
  },
  {
    "patternId": "SC2100",
    "title": "Use `$((..))` for arithmetics, e.g. `i=$((i + 2))`",
    "description": "Use `$((..))` for arithmetics, e.g. `i=$((i + 2))`"
  },
  {
    "patternId": "SC2101",
    "title": "Named class needs outer `[]`, e.g. `[[:digit:]]`.",
    "description": "Named class needs outer `[]`, e.g. `[[:digit:]]`."
  },
  {
    "patternId": "SC2102",
    "title": "Ranges can only match single chars (mentioned due to duplicates).",
    "description": "Ranges can only match single chars (mentioned due to duplicates)."
  },
  {
    "patternId": "SC2103",
    "title": "Use a `( subshell )` to avoid having to `cd` back.",
    "description": "Use a `( subshell )` to avoid having to `cd` back."
  },
  {
    "patternId": "SC2104",
    "title": "In functions, use `return` instead of `break`.",
    "description": "In functions, use `return` instead of `break`."
  },
  {
    "patternId": "SC2105",
    "title": "`break` is only valid in loops",
    "description": "`break` is only valid in loops"
  },
  {
    "patternId": "SC2106",
    "title": "This only exits the subshell caused by the pipeline.",
    "description": "This only exits the subshell caused by the pipeline."
  },
  {
    "patternId": "SC2107",
    "title": "Instead of `[ a && b ]`, use `[ a ] && [ b ]`.",
    "description": "Instead of `[ a && b ]`, use `[ a ] && [ b ]`."
  },
  {
    "patternId": "SC2108",
    "title": "In `[[..]]`, use `&&` instead of `-a`.",
    "description": "In `[[..]]`, use `&&` instead of `-a`."
  },
  {
    "patternId": "SC2109",
    "title": "Instead of `[ a || b ]`, use `[ a ] || [ b ]`.",
    "description": "Instead of `[ a || b ]`, use `[ a ] || [ b ]`."
  },
  {
    "patternId": "SC2110",
    "title": "In `[[..]]`, use `||` instead of `-o`.",
    "description": "In `[[..]]`, use `||` instead of `-o`."
  },
  {
    "patternId": "SC2111",
    "title": "ksh does not allow 'function' keyword and '()' at the same time.",
    "description": "ksh does not allow 'function' keyword and '()' at the same time."
  },
  {
    "patternId": "SC2112",
    "title": "`function` keyword is non-standard. Delete it.",
    "description": "`function` keyword is non-standard. Delete it."
  },
  {
    "patternId": "SC2113",
    "title": "`function` keyword is non-standard. Use `foo()` instead of `function foo`.",
    "description": "`function` keyword is non-standard. Use `foo()` instead of `function foo`."
  },
  {
    "patternId": "SC2114",
    "title": "Warning: deletes a system directory.",
    "description": "Warning: deletes a system directory."
  },
  {
    "patternId": "SC2115",
    "title": "Use `\"${var:?}\"` to ensure this never expands to `/*` .",
    "description": "Use `\"${var:?}\"` to ensure this never expands to `/*` ."
  },
  {
    "patternId": "SC2116",
    "title": "Useless echo? Instead of `cmd $(echo foo)`, just use `cmd foo`.",
    "description": "Useless echo? Instead of `cmd $(echo foo)`, just use `cmd foo`."
  },
  {
    "patternId": "SC2117",
    "title": "To run commands as another user, use `su -c` or `sudo`.",
    "description": "To run commands as another user, use `su -c` or `sudo`."
  },
  {
    "patternId": "SC2119",
    "title": "Use `foo \"$@\"` if function's `$1` should mean script's `$1`.",
    "description": "Use `foo \"$@\"` if function's `$1` should mean script's `$1`."
  },
  {
    "patternId": "SC2120",
    "title": "foo references arguments, but none are ever passed.",
    "description": "foo references arguments, but none are ever passed."
  },
  {
    "patternId": "SC2121",
    "title": "To assign a variable, use just `var=value`, not `set ..`.",
    "description": "To assign a variable, use just `var=value`, not `set ..`."
  },
  {
    "patternId": "SC2122",
    "title": "`>=` is not a valid operator. Use `! a < b` instead.",
    "description": "`>=` is not a valid operator. Use `! a < b` instead."
  },
  {
    "patternId": "SC2123",
    "title": "`PATH` is the shell search path. Use another name.",
    "description": "`PATH` is the shell search path. Use another name."
  },
  {
    "patternId": "SC2124",
    "title": "Assigning an array to a string! Assign as array, or use `*` instead of `@` to concatenate.",
    "description": "Assigning an array to a string! Assign as array, or use `*` instead of `@` to concatenate."
  },
  {
    "patternId": "SC2125",
    "title": "Brace expansions and globs are literal in assignments. Quote it or use an array.",
    "description": "Brace expansions and globs are literal in assignments. Quote it or use an array."
  },
  {
    "patternId": "SC2126",
    "title": "Consider using `grep -c` instead of `grep | wc`",
    "description": "Consider using `grep -c` instead of `grep | wc`"
  },
  {
    "patternId": "SC2128",
    "title": "Expanding an array without an index only gives the first element.",
    "description": "Expanding an array without an index only gives the first element."
  },
  {
    "patternId": "SC2129",
    "title": "Consider using `{ cmd1; cmd2; } >> file` instead of individual redirects.",
    "description": "Consider using `{ cmd1; cmd2; } >> file` instead of individual redirects."
  },
  {
    "patternId": "SC2139",
    "title": "This expands when defined, not when used. Consider escaping.",
    "description": "This expands when defined, not when used. Consider escaping."
  },
  {
    "patternId": "SC2140",
    "title": "Word is of the form `\"A\"B\"C\"` (B indicated). Did you mean `\"ABC\"` or `\"A\\\\\"B\\\\\"C\"`?",
    "description": "Word is of the form `\"A\"B\"C\"` (B indicated). Did you mean `\"ABC\"` or `\"A\\\\\"B\\\\\"C\"`?"
  },
  {
    "patternId": "SC2141",
    "title": "Did you mean `IFS=$'\\t'` ?",
    "description": "Did you mean `IFS=$'\\t'` ?"
  },
  {
    "patternId": "SC2142",
    "title": "Aliases can't use positional parameters. Use a function.",
    "description": "Aliases can't use positional parameters. Use a function."
  },
  {
    "patternId": "SC2143",
    "title": "Use `grep -q` instead of comparing output with `[ -n .. ]`.",
    "description": "Use `grep -q` instead of comparing output with `[ -n .. ]`."
  },
  {
    "patternId": "SC2144",
    "title": "`-e` doesn't work with globs. Use a `for` loop.",
    "description": "`-e` doesn't work with globs. Use a `for` loop."
  },
  {
    "patternId": "SC2145",
    "title": "Argument mixes string and array. Use `*` or separate argument.",
    "description": "Argument mixes string and array. Use `*` or separate argument."
  },
  {
    "patternId": "SC2146",
    "title": "This action ignores everything before the `-o`. Use `\\( \\)` to group.",
    "description": "This action ignores everything before the `-o`. Use `\\( \\)` to group."
  },
  {
    "patternId": "SC2147",
    "title": "Literal tilde in PATH works poorly across programs.",
    "description": "Literal tilde in PATH works poorly across programs."
  },
  {
    "patternId": "SC2148",
    "title": "Tips depend on target shell and yours is unknown. Add a shebang.",
    "description": "Tips depend on target shell and yours is unknown. Add a shebang."
  },
  {
    "patternId": "SC2150",
    "title": "`-exec` does not automatically invoke a shell. Use `-exec sh -c ..` for that.",
    "description": "`-exec` does not automatically invoke a shell. Use `-exec sh -c ..` for that."
  },
  {
    "patternId": "SC2151",
    "title": "Only one integer 0-255 can be returned. Use stdout for other data.",
    "description": "Only one integer 0-255 can be returned. Use stdout for other data."
  },
  {
    "patternId": "SC2152",
    "title": "Can only return 0-255. Other data should be written to stdout.",
    "description": "Can only return 0-255. Other data should be written to stdout."
  },
  {
    "patternId": "SC2153",
    "title": "Possible Misspelling: MYVARIABLE may not be assigned. Did you mean MY_VARIABLE?",
    "description": "Possible Misspelling: MYVARIABLE may not be assigned. Did you mean MY_VARIABLE?"
  },
  {
    "patternId": "SC2154",
    "title": "var is referenced but not assigned.",
    "description": "var is referenced but not assigned."
  },
  {
    "patternId": "SC2155",
    "title": "Declare and assign separately to avoid masking return values.",
    "description": "Declare and assign separately to avoid masking return values."
  },
  {
    "patternId": "SC2156",
    "title": "Injecting filenames is fragile and insecure. Use parameters.",
    "description": "Injecting filenames is fragile and insecure. Use parameters."
  },
  {
    "patternId": "SC2157",
    "title": "Argument to implicit `-n` is always true due to literal strings.",
    "description": "Argument to implicit `-n` is always true due to literal strings."
  },
  {
    "patternId": "SC2158",
    "title": "`[ false ]` is true. Remove the brackets",
    "description": "`[ false ]` is true. Remove the brackets"
  },
  {
    "patternId": "SC2159",
    "title": "`[ 0 ]` is true. Use `false` instead.",
    "description": "`[ 0 ]` is true. Use `false` instead."
  },
  {
    "patternId": "SC2160",
    "title": "Instead of `[ true ]`, just use `true`.",
    "description": "Instead of `[ true ]`, just use `true`."
  },
  {
    "patternId": "SC2161",
    "title": "Instead of `[ 1 ]`, use `true`.",
    "description": "Instead of `[ 1 ]`, use `true`."
  },
  {
    "patternId": "SC2162",
    "title": "`read` without `-r` will mangle backslashes.",
    "description": "`read` without `-r` will mangle backslashes."
  },
  {
    "patternId": "SC2163",
    "title": "This does not export `FOO`. Remove `$`/`${}` for that, or use `${var?}` to quiet.",
    "description": "This does not export `FOO`. Remove `$`/`${}` for that, or use `${var?}` to quiet."
  },
  {
    "patternId": "SC2164",
    "title": "Use `cd ... || exit` in case `cd` fails.",
    "description": "Use `cd ... || exit` in case `cd` fails."
  },
  {
    "patternId": "SC2165",
    "title": "This nested loop overrides the index variable of its parent.",
    "description": "This nested loop overrides the index variable of its parent."
  },
  {
    "patternId": "SC2166",
    "title": "Prefer `[ p ] && [ q ]` as `[ p -a q ]` is not well defined.",
    "description": "Prefer `[ p ] && [ q ]` as `[ p -a q ]` is not well defined."
  },
  {
    "patternId": "SC2167",
    "title": "This parent loop has its index variable overridden.",
    "description": "This parent loop has its index variable overridden."
  },
  {
    "patternId": "SC2168",
    "title": "`local` is only valid in functions.",
    "description": "`local` is only valid in functions."
  },
  {
    "patternId": "SC2170",
    "title": "Invalid number for `-eq`. Use `=` to compare as string (or use `$var` to expand as a variable).",
    "description": "Invalid number for `-eq`. Use `=` to compare as string (or use `$var` to expand as a variable)."
  },
  {
    "patternId": "SC2171",
    "title": "Found trailing `]` outside test. Add missing `[` or quote if intentional.",
    "description": "Found trailing `]` outside test. Add missing `[` or quote if intentional."
  },
  {
    "patternId": "SC2172",
    "title": "Trapping signals by number is not well defined. Prefer signal names.",
    "description": "Trapping signals by number is not well defined. Prefer signal names."
  },
  {
    "patternId": "SC2173",
    "title": "SIGKILL/SIGSTOP can not be trapped.",
    "description": "SIGKILL/SIGSTOP can not be trapped."
  },
  {
    "patternId": "SC2174",
    "title": "When used with `-p`, `-m` only applies to the deepest directory.",
    "description": "When used with `-p`, `-m` only applies to the deepest directory."
  },
  {
    "patternId": "SC2175",
    "title": "Quote this invalid brace expansion since it should be passed literally to eval",
    "description": "Quote this invalid brace expansion since it should be passed literally to eval"
  },
  {
    "patternId": "SC2176",
    "title": "`time` is undefined for pipelines. time single stage or `bash -c` instead.",
    "description": "`time` is undefined for pipelines. time single stage or `bash -c` instead."
  },
  {
    "patternId": "SC2177",
    "title": "`time` is undefined for compound commands, use `time sh -c` instead.",
    "description": "`time` is undefined for compound commands, use `time sh -c` instead."
  },
  {
    "patternId": "SC2178",
    "title": "Variable was used as an array but is now assigned a string.",
    "description": "Variable was used as an array but is now assigned a string."
  },
  {
    "patternId": "SC2179",
    "title": "Use `array+=(\"item\")` to append items to an array.",
    "description": "Use `array+=(\"item\")` to append items to an array."
  },
  {
    "patternId": "SC2180",
    "title": "Bash does not support multidimensional arrays. Use 1D or associative arrays.",
    "description": "Bash does not support multidimensional arrays. Use 1D or associative arrays."
  },
  {
    "patternId": "SC2181",
    "title": "Check exit code directly with e.g. `if mycmd;`, not indirectly with `$?`.",
    "description": "Check exit code directly with e.g. `if mycmd;`, not indirectly with `$?`."
  },
  {
    "patternId": "SC2182",
    "title": "This printf format string has no variables. Other arguments are ignored.",
    "description": "This printf format string has no variables. Other arguments are ignored."
  },
  {
    "patternId": "SC2183",
    "title": "This format string has 2 variables, but is passed 1 arguments.",
    "description": "This format string has 2 variables, but is passed 1 arguments."
  },
  {
    "patternId": "SC2184",
    "title": "Quote arguments to unset so they're not glob expanded.",
    "description": "Quote arguments to unset so they're not glob expanded."
  },
  {
    "patternId": "SC2185",
    "title": "Some finds don't have a default path. Specify `.` explicitly.",
    "description": "Some finds don't have a default path. Specify `.` explicitly."
  },
  {
    "patternId": "SC2186",
    "title": "tempfile is deprecated. Use mktemp instead.",
    "description": "tempfile is deprecated. Use mktemp instead."
  },
  {
    "patternId": "SC2187",
    "title": "Ash scripts will be checked as Dash. Add `# shellcheck shell=dash` to silence.",
    "description": "Ash scripts will be checked as Dash. Add `# shellcheck shell=dash` to silence."
  },
  {
    "patternId": "SC2188",
    "title": "This redirection doesn't have a command. Move to its command (or use `true` as no-op).",
    "description": "This redirection doesn't have a command. Move to its command (or use `true` as no-op)."
  },
  {
    "patternId": "SC2189",
    "title": "You can't have `|` between this redirection and the command it should apply to.",
    "description": "You can't have `|` between this redirection and the command it should apply to."
  },
  {
    "patternId": "SC2190",
    "title": "Elements in associative arrays need index, e.g. `array=( [index]=value )` .",
    "description": "Elements in associative arrays need index, e.g. `array=( [index]=value )` ."
  },
  {
    "patternId": "SC2191",
    "title": "The `=` here is literal. To assign by index, use `( [index]=value )` with no spaces. To keep as literal, quote it.",
    "description": "The `=` here is literal. To assign by index, use `( [index]=value )` with no spaces. To keep as literal, quote it."
  },
  {
    "patternId": "SC2192",
    "title": "This array element has no value. Remove spaces after `=` or use `\"\"` for empty string.",
    "description": "This array element has no value. Remove spaces after `=` or use `\"\"` for empty string."
  },
  {
    "patternId": "SC2193",
    "title": "The arguments to this comparison can never be equal. Make sure your syntax is correct.",
    "description": "The arguments to this comparison can never be equal. Make sure your syntax is correct."
  },
  {
    "patternId": "SC2194",
    "title": "This word is constant. Did you forget the `$` on a variable?",
    "description": "This word is constant. Did you forget the `$` on a variable?"
  },
  {
    "patternId": "SC2195",
    "title": "This pattern will never match the case statement's word. Double check them.",
    "description": "This pattern will never match the case statement's word. Double check them."
  },
  {
    "patternId": "SC2196",
    "title": "`egrep` is non-standard and deprecated. Use `grep -E` instead.",
    "description": "`egrep` is non-standard and deprecated. Use `grep -E` instead."
  },
  {
    "patternId": "SC2197",
    "title": "`fgrep` is non-standard and deprecated. Use `grep -F` instead.",
    "description": "`fgrep` is non-standard and deprecated. Use `grep -F` instead."
  },
  {
    "patternId": "SC2198",
    "title": "Arrays don't work as operands in `[ ]`. Use a loop (or concatenate with `*` instead of `@`).",
    "description": "Arrays don't work as operands in `[ ]`. Use a loop (or concatenate with `*` instead of `@`)."
  },
  {
    "patternId": "SC2199",
    "title": "Arrays implicitly concatenate in `[[ ]]`. Use a loop (or explicit `*` instead of `@`).",
    "description": "Arrays implicitly concatenate in `[[ ]]`. Use a loop (or explicit `*` instead of `@`)."
  },
  {
    "patternId": "SC2200",
    "title": "Brace expansions don't work as operands in `[ ]`. Use a loop.",
    "description": "Brace expansions don't work as operands in `[ ]`. Use a loop."
  },
  {
    "patternId": "SC2201",
    "title": "Brace expansion doesn't happen in `[[ ]]`. Use a loop.",
    "description": "Brace expansion doesn't happen in `[[ ]]`. Use a loop."
  },
  {
    "patternId": "SC2202",
    "title": "Globs don't work as operands in `[ ]`. Use a loop.",
    "description": "Globs don't work as operands in `[ ]`. Use a loop."
  },
  {
    "patternId": "SC2203",
    "title": "Globs are ignored in `[[ ]]` except right of `=`/`!=`. Use a loop.",
    "description": "Globs are ignored in `[[ ]]` except right of `=`/`!=`. Use a loop."
  },
  {
    "patternId": "SC2204",
    "title": "`(..)` is a subshell. Did you mean `[ .. ]`, a test expression?",
    "description": "`(..)` is a subshell. Did you mean `[ .. ]`, a test expression?"
  },
  {
    "patternId": "SC2205",
    "title": "`(..)` is a subshell. Did you mean `[ .. ]`, a test expression?",
    "description": "`(..)` is a subshell. Did you mean `[ .. ]`, a test expression?"
  },
  {
    "patternId": "SC2206",
    "title": "Quote to prevent word splitting/globbing, or split robustly with mapfile or `read -a`.",
    "description": "Quote to prevent word splitting/globbing, or split robustly with mapfile or `read -a`."
  },
  {
    "patternId": "SC2207",
    "title": "Prefer `mapfile` or `read -a` to split command output (or quote to avoid splitting).",
    "description": "Prefer `mapfile` or `read -a` to split command output (or quote to avoid splitting)."
  },
  {
    "patternId": "SC2208",
    "title": "Use `[[ ]]` or quote arguments to `-v` to avoid glob expansion.",
    "description": "Use `[[ ]]` or quote arguments to `-v` to avoid glob expansion."
  },
  {
    "patternId": "SC2209",
    "title": "Use `var=$(command)` to assign output (or quote to assign string).",
    "description": "Use `var=$(command)` to assign output (or quote to assign string)."
  },
  {
    "patternId": "SC2210",
    "title": "This is a file redirection. Was it supposed to be a comparison or fd operation?",
    "description": "This is a file redirection. Was it supposed to be a comparison or fd operation?"
  },
  {
    "patternId": "SC2211",
    "title": "This is a glob used as a command name. Was it supposed to be in `${..}`, array, or is it missing quoting?",
    "description": "This is a glob used as a command name. Was it supposed to be in `${..}`, array, or is it missing quoting?"
  },
  {
    "patternId": "SC2212",
    "title": "Use `false` instead of empty `[`/`[[` conditionals.",
    "description": "Use `false` instead of empty `[`/`[[` conditionals."
  },
  {
    "patternId": "SC2213",
    "title": "getopts specified `-n`, but it's not handled by this `case`.",
    "description": "getopts specified `-n`, but it's not handled by this `case`."
  },
  {
    "patternId": "SC2214",
    "title": "This case is not specified by getopts.",
    "description": "This case is not specified by getopts."
  },
  {
    "patternId": "SC2215",
    "title": "This flag is used as a command name. Bad line break or missing `[ .. ]`?",
    "description": "This flag is used as a command name. Bad line break or missing `[ .. ]`?"
  },
  {
    "patternId": "SC2216",
    "title": "Piping to `rm`, a command that doesn't read stdin. Wrong command or missing `xargs`?",
    "description": "Piping to `rm`, a command that doesn't read stdin. Wrong command or missing `xargs`?"
  },
  {
    "patternId": "SC2217",
    "title": "Redirecting to `echo`, a command that doesn't read stdin. Bad quoting or missing `xargs`?",
    "description": "Redirecting to `echo`, a command that doesn't read stdin. Bad quoting or missing `xargs`?"
  },
  {
    "patternId": "SC2218",
    "title": "This function is only defined later. Move the definition up.",
    "description": "This function is only defined later. Move the definition up."
  },
  {
    "patternId": "SC2219",
    "title": "Instead of `let expr`, prefer `(( expr ))` .",
    "description": "Instead of `let expr`, prefer `(( expr ))` ."
  },
  {
    "patternId": "SC2220",
    "title": "Invalid flags are not handled. Add a `*)` case.",
    "description": "Invalid flags are not handled. Add a `*)` case."
  },
  {
    "patternId": "SC2221",
    "title": "This pattern always overrides a later one.",
    "description": "This pattern always overrides a later one."
  },
  {
    "patternId": "SC2222",
    "title": "This pattern never matches because of a previous pattern.",
    "description": "This pattern never matches because of a previous pattern."
  },
  {
    "patternId": "SC2223",
    "title": "This default assignment may cause DoS due to globbing. Quote it.",
    "description": "This default assignment may cause DoS due to globbing. Quote it."
  },
  {
    "patternId": "SC2224",
    "title": "This `mv` has no destination. Check the arguments.",
    "description": "This `mv` has no destination. Check the arguments."
  },
  {
    "patternId": "SC2225",
    "title": "This `cp` has no destination. Check the arguments.",
    "description": "This `cp` has no destination. Check the arguments."
  },
  {
    "patternId": "SC2226",
    "title": "This `ln` has no destination. Check the arguments, or specify `.` explicitly.",
    "description": "This `ln` has no destination. Check the arguments, or specify `.` explicitly."
  },
  {
    "patternId": "SC2227",
    "title": "Redirection applies to the find command itself. Rewrite to work per action (or move to end).",
    "description": "Redirection applies to the find command itself. Rewrite to work per action (or move to end)."
  },
  {
    "patternId": "SC2229",
    "title": "This does not read `foo`. Remove `$`/`${}` for that, or use `${var?}` to quiet.",
    "description": "This does not read `foo`. Remove `$`/`${}` for that, or use `${var?}` to quiet."
  },
  {
    "patternId": "SC2230",
    "title": "`which` is non-standard. Use builtin `command -v` instead.",
    "description": "`which` is non-standard. Use builtin `command -v` instead."
  },
  {
    "patternId": "SC2231",
    "title": "Quote expansions in this `for` loop glob to prevent wordsplitting, e.g. `\"$dir\"/*.txt` .",
    "description": "Quote expansions in this `for` loop glob to prevent wordsplitting, e.g. `\"$dir\"/*.txt` ."
  },
  {
    "patternId": "SC2232",
    "title": "Can't use `sudo` with builtins like `cd`. Did you want `sudo sh -c ..` instead?",
    "description": "Can't use `sudo` with builtins like `cd`. Did you want `sudo sh -c ..` instead?"
  },
  {
    "patternId": "SC2233",
    "title": "Remove superfluous `(..)` around condition to avoid subshell overhead.",
    "description": "Remove superfluous `(..)` around condition to avoid subshell overhead."
  },
  {
    "patternId": "SC2234",
    "title": "Remove superfluous `(..)` around test command to avoid subshell overhead.",
    "description": "Remove superfluous `(..)` around test command to avoid subshell overhead."
  },
  {
    "patternId": "SC2235",
    "title": "Use `{ ..; }` instead of `(..)` to avoid subshell overhead.",
    "description": "Use `{ ..; }` instead of `(..)` to avoid subshell overhead."
  },
  {
    "patternId": "SC2236",
    "title": "Use `-n` instead of `! -z`.",
    "description": "Use `-n` instead of `! -z`."
  },
  {
    "patternId": "SC2237",
    "title": "Use `[ -n .. ]` instead of `! [ -z .. ]`.",
    "description": "Use `[ -n .. ]` instead of `! [ -z .. ]`."
  },
  {
    "patternId": "SC2238",
    "title": "Redirecting to/from command name instead of file. Did you want pipes/xargs (or quote to ignore)?",
    "description": "Redirecting to/from command name instead of file. Did you want pipes/xargs (or quote to ignore)?"
  },
  {
    "patternId": "SC2239",
    "title": "Ensure the shebang uses the absolute path to the interpreter.",
    "description": "Ensure the shebang uses the absolute path to the interpreter."
  },
  {
    "patternId": "SC2240",
    "title": "The dot command does not support arguments in sh/dash. Set them as variables.",
    "description": "The dot command does not support arguments in sh/dash. Set them as variables."
  },
  {
    "patternId": "SC2241",
    "title": "The exit status can only be one integer 0-255. Use stdout for other data.",
    "description": "The exit status can only be one integer 0-255. Use stdout for other data."
  },
  {
    "patternId": "SC2242",
    "title": "Can only exit with status 0-255. Other data should be written to stdout/stderr.",
    "description": "Can only exit with status 0-255. Other data should be written to stdout/stderr."
  },
  {
    "patternId": "SC2243",
    "title": "Prefer explicit `-n` to check for output (or run command without `[`/`[[` to check for success)",
    "description": "Prefer explicit `-n` to check for output (or run command without `[`/`[[` to check for success)"
  },
  {
    "patternId": "SC2244",
    "title": "Prefer explicit `-n` to check non-empty string (or use `=`/`-ne` to check boolean/integer).",
    "description": "Prefer explicit `-n` to check non-empty string (or use `=`/`-ne` to check boolean/integer)."
  },
  {
    "patternId": "SC2245",
    "title": "-d only applies to the first expansion of this glob. Use a loop to check any/all.",
    "description": "-d only applies to the first expansion of this glob. Use a loop to check any/all."
  },
  {
    "patternId": "SC2246",
    "title": "This shebang specifies a directory. Ensure the interpreter is a file.",
    "description": "This shebang specifies a directory. Ensure the interpreter is a file."
  },
  {
    "patternId": "SC2247",
    "title": "Flip leading `$` and `\"` if this should be a quoted substitution.",
    "description": "Flip leading `$` and `\"` if this should be a quoted substitution."
  },
  {
    "patternId": "SC2248",
    "title": "Warn about double quoting even when variables don't contain special characters.",
    "description": "Warn about double quoting even when variables don't contain special characters."
  },
  {
    "patternId": "SC2249",
    "title": "Consider adding a default `*)` case, even if it just exits with error.",
    "description": "Consider adding a default `*)` case, even if it just exits with error."
  },
  {
    "patternId": "SC2250",
    "title": "Prefer putting braces around variable references even when not strictly required.",
    "description": "Prefer putting braces around variable references even when not strictly required."
  },
  {
    "patternId": "SC2251",
    "title": "This `!` is not on a condition and skips errexit. Use `&& exit 1` instead, or make sure `$?` is checked.",
    "description": "This `!` is not on a condition and skips errexit. Use `&& exit 1` instead, or make sure `$?` is checked."
  },
  {
    "patternId": "SC2252",
    "title": "You probably wanted `&&` here, otherwise it's always true.",
    "description": "You probably wanted `&&` here, otherwise it's always true."
  },
  {
    "patternId": "SC2253",
    "title": "Use `-R` to recurse, or explicitly `a-r` to remove read permissions.",
    "description": "Use `-R` to recurse, or explicitly `a-r` to remove read permissions."
  },
  {
    "patternId": "SC2254",
    "title": "Quote expansions in case patterns to match literally rather than as a glob.",
    "description": "Quote expansions in case patterns to match literally rather than as a glob."
  },
  {
    "patternId": "SC2255",
    "title": "`[ ]` does not apply arithmetic evaluation. Evaluate with `$((..))` for numbers, or use string comparator for strings.",
    "description": "`[ ]` does not apply arithmetic evaluation. Evaluate with `$((..))` for numbers, or use string comparator for strings."
  },
  {
    "patternId": "SC2256",
    "title": "This translated string is the name of a variable. Flip leading `$` and `\"` if this should be a quoted substitution.",
    "description": "This translated string is the name of a variable. Flip leading `$` and `\"` if this should be a quoted substitution."
  },
  {
    "patternId": "SC2257",
    "title": "Arithmetic modifications in command redirections may be discarded. Do them separately.",
    "description": "Arithmetic modifications in command redirections may be discarded. Do them separately."
  },
  {
    "patternId": "SC2259",
    "title": "This redirection overrides piped input. To use both, merge or pass filenames.",
    "description": "This redirection overrides piped input. To use both, merge or pass filenames."
  },
  {
    "patternId": "SC2260",
    "title": "This redirection overrides the output pipe. Use `tee` to output to both.",
    "description": "This redirection overrides the output pipe. Use `tee` to output to both."
  },
  {
    "patternId": "SC2261",
    "title": "Multiple redirections compete for stdout. Use `cat`, `tee`, or pass filenames instead.",
    "description": "Multiple redirections compete for stdout. Use `cat`, `tee`, or pass filenames instead."
  },
  {
    "patternId": "SC2262",
    "title": "This alias can't be defined and used in the same parsing unit. Use a function instead.",
    "description": "This alias can't be defined and used in the same parsing unit. Use a function instead."
  },
  {
    "patternId": "SC2263",
    "title": "Since they're in the same parsing unit, this command will not refer to the previously mentioned alias.",
    "description": "Since they're in the same parsing unit, this command will not refer to the previously mentioned alias."
  },
  {
    "patternId": "SC2264",
    "title": "This function unconditionally re-invokes itself. Missing `command`?",
    "description": "This function unconditionally re-invokes itself. Missing `command`?"
  },
  {
    "patternId": "SC2267",
    "title": "GNU `xargs -i` is deprecated in favor of `-I{}`",
    "description": "GNU `xargs -i` is deprecated in favor of `-I{}`"
  },
  {
    "patternId": "SC2268",
    "title": "Avoid x-prefix in comparisons as it no longer serves a purpose.",
    "description": "Avoid x-prefix in comparisons as it no longer serves a purpose."
  },
  {
    "patternId": "SC2269",
    "title": "This variable is assigned to itself, so the assignment does nothing.",
    "description": "This variable is assigned to itself, so the assignment does nothing."
  },
  {
    "patternId": "SC2270",
    "title": "To assign positional parameters, use `set -- first second ..` (or use `[ ]` to compare).",
    "description": "To assign positional parameters, use `set -- first second ..` (or use `[ ]` to compare)."
  },
  {
    "patternId": "SC2271",
    "title": "For indirection, use arrays, `declare \"var$n=value\"`, or (for sh) read/eval",
    "description": "For indirection, use arrays, `declare \"var$n=value\"`, or (for sh) read/eval"
  },
  {
    "patternId": "SC2272",
    "title": "Command name contains `==`. For comparison, use `[ \"$var\" = value ]`.",
    "description": "Command name contains `==`. For comparison, use `[ \"$var\" = value ]`."
  },
  {
    "patternId": "SC2273",
    "title": "Sequence of `===`s found. Merge conflict or intended as a commented border?",
    "description": "Sequence of `===`s found. Merge conflict or intended as a commented border?"
  },
  {
    "patternId": "SC2274",
    "title": "Command name starts with `===`. Intended as a commented border?",
    "description": "Command name starts with `===`. Intended as a commented border?"
  },
  {
    "patternId": "SC2275",
    "title": "Command name starts with `=`. Bad line break?",
    "description": "Command name starts with `=`. Bad line break?"
  },
  {
    "patternId": "SC2276",
    "title": "This is interpreted as a command name containing `=`. Bad assignment or comparison?",
    "description": "This is interpreted as a command name containing `=`. Bad assignment or comparison?"
  },
  {
    "patternId": "SC2277",
    "title": "Use `BASH_ARGV0` to assign to `$0` in bash (or use `[ ]` to compare).",
    "description": "Use `BASH_ARGV0` to assign to `$0` in bash (or use `[ ]` to compare)."
  },
  {
    "patternId": "SC2278",
    "title": "`$0` can't be assigned in Ksh (but it does reflect the current function).",
    "description": "`$0` can't be assigned in Ksh (but it does reflect the current function)."
  },
  {
    "patternId": "SC2279",
    "title": "`$0` can't be assigned in Dash. This becomes a command name.",
    "description": "`$0` can't be assigned in Dash. This becomes a command name."
  },
  {
    "patternId": "SC2280",
    "title": "`$0` can't be assigned this way, and there is no portable alternative.",
    "description": "`$0` can't be assigned this way, and there is no portable alternative."
  },
  {
    "patternId": "SC2281",
    "title": "Don't use `$`/`${}` on the left side of assignments.",
    "description": "Don't use `$`/`${}` on the left side of assignments."
  },
  {
    "patternId": "SC2282",
    "title": "Variable names can't start with numbers, so this is interpreted as a command.",
    "description": "Variable names can't start with numbers, so this is interpreted as a command."
  },
  {
    "patternId": "SC2283",
    "title": "Use `[ ]` to compare values, or remove spaces around `=` to assign (or quote `'='` if literal).",
    "description": "Use `[ ]` to compare values, or remove spaces around `=` to assign (or quote `'='` if literal)."
  },
  {
    "patternId": "SC2284",
    "title": "Use `[ x = y ]` to compare values (or quote `'=='` if literal).",
    "description": "Use `[ x = y ]` to compare values (or quote `'=='` if literal)."
  },
  {
    "patternId": "SC2285",
    "title": "Remove spaces around `+=` to assign (or quote `'+='` if literal).",
    "description": "Remove spaces around `+=` to assign (or quote `'+='` if literal)."
  },
  {
    "patternId": "SC2286",
    "title": "This empty string is interpreted as a command name. Double check syntax (or use 'true' as a no-op).",
    "description": "This empty string is interpreted as a command name. Double check syntax (or use 'true' as a no-op)."
  },
  {
    "patternId": "SC2287",
    "title": "This is interpreted as a command name ending with '/'. Double check syntax.",
    "description": "This is interpreted as a command name ending with '/'. Double check syntax."
  },
  {
    "patternId": "SC2288",
    "title": "This is interpreted as a command name ending with apostrophe. Double check syntax.",
    "description": "This is interpreted as a command name ending with apostrophe. Double check syntax."
  },
  {
    "patternId": "SC2289",
    "title": "This is interpreted as a command name containing a linefeed. Double check syntax.",
    "description": "This is interpreted as a command name containing a linefeed. Double check syntax."
  },
  {
    "patternId": "SC2290",
    "title": "Remove spaces around = to assign.",
    "description": "Remove spaces around = to assign."
  },
  {
    "patternId": "SC2291",
    "title": "Quote repeated spaces to avoid them collapsing into one.",
    "description": "Quote repeated spaces to avoid them collapsing into one."
  },
  {
    "patternId": "SC2292",
    "title": "Prefer `[[ ]]` over `[ ]` for tests in Bash/Ksh.",
    "description": "Prefer `[[ ]]` over `[ ]` for tests in Bash/Ksh."
  },
  {
    "patternId": "SC2293",
    "title": "When eval'ing @Q-quoted words, use * rather than @ as the index.",
    "description": "When eval'ing @Q-quoted words, use * rather than @ as the index."
  },
  {
    "patternId": "SC2294",
    "title": "eval negates the benefit of arrays. Drop eval to preserve whitespace/symbols (or eval as string).",
    "description": "eval negates the benefit of arrays. Drop eval to preserve whitespace/symbols (or eval as string)."
  },
  {
    "patternId": "SC2295",
    "title": "Expansions inside `${..}` need to be quoted separately, otherwise they will match as a pattern.",
    "description": "Expansions inside `${..}` need to be quoted separately, otherwise they will match as a pattern."
  },
  {
    "patternId": "SC2296",
    "title": "Parameter expansions can't start with `{`. Double check syntax.",
    "description": "Parameter expansions can't start with `{`. Double check syntax."
  },
  {
    "patternId": "SC2297",
    "title": "Double quotes must be outside `${}`: `${\"invalid\"}` vs `\"${valid}\"`.",
    "description": "Double quotes must be outside `${}`: `${\"invalid\"}` vs `\"${valid}\"`."
  },
  {
    "patternId": "SC2298",
    "title": "`${$x}` is invalid. For expansion, use ${x}. For indirection, use arrays, ${!x} or (for sh) eval.",
    "description": "`${$x}` is invalid. For expansion, use ${x}. For indirection, use arrays, ${!x} or (for sh) eval."
  },
  {
    "patternId": "SC2299",
    "title": "Parameter expansions can't be nested. Use temporary variables.",
    "description": "Parameter expansions can't be nested. Use temporary variables."
  },
  {
    "patternId": "SC2300",
    "title": "Parameter expansion can't be applied to command substitutions. Use temporary variables.",
    "description": "Parameter expansion can't be applied to command substitutions. Use temporary variables."
  },
  {
    "patternId": "SC2301",
    "title": "Parameter expansion starts with unexpected quotes. Double check syntax.",
    "description": "Parameter expansion starts with unexpected quotes. Double check syntax."
  },
  {
    "patternId": "SC2302",
    "title": "This loops over values. To loop over keys, use `\"${!array[@]}\"`.",
    "description": "This loops over values. To loop over keys, use `\"${!array[@]}\"`."
  },
  {
    "patternId": "SC2303",
    "title": "`i` is an array value, not a key. Use directly or loop over keys instead.",
    "description": "`i` is an array value, not a key. Use directly or loop over keys instead."
  },
  {
    "patternId": "SC2304",
    "title": "`*` must be escaped to multiply: `\\*`. Modern `$((x * y))` avoids this issue.",
    "description": "`*` must be escaped to multiply: `\\*`. Modern `$((x * y))` avoids this issue."
  },
  {
    "patternId": "SC2305",
    "title": "Quote regex argument to expr to avoid it expanding as a glob.",
    "description": "Quote regex argument to expr to avoid it expanding as a glob."
  },
  {
    "patternId": "SC2307",
    "title": "'expr' expects 3+ arguments but sees 1. Make sure each operator/operand is a separate argument, and escape <>&|.",
    "description": "'expr' expects 3+ arguments but sees 1. Make sure each operator/operand is a separate argument, and escape <>&|."
  },
  {
    "patternId": "SC2308",
    "title": "`expr length` has unspecified results. Prefer `${#var}`.",
    "description": "`expr length` has unspecified results. Prefer `${#var}`."
  },
  {
    "patternId": "SC2309",
    "title": "-eq treats this as a variable. Use = to compare as string (or expand explicitly with $var)",
    "description": "-eq treats this as a variable. Use = to compare as string (or expand explicitly with $var)"
  },
  {
    "patternId": "SC2310",
    "title": "This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.",
    "description": "This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit."
  },
  {
    "patternId": "SC2311",
    "title": "Bash implicitly disabled set -e for this function invocation because it's inside a command substitution. Add set -e; before it or enable inherit_errexit.",
    "description": "Bash implicitly disabled set -e for this function invocation because it's inside a command substitution. Add set -e; before it or enable inherit_errexit."
  },
  {
    "patternId": "SC2312",
    "title": "Consider invoking this command separately to avoid masking its return value (or use '|| true' to ignore).",
    "description": "Consider invoking this command separately to avoid masking its return value (or use '|| true' to ignore)."
  },
  {
    "patternId": "SC2313",
    "title": "Quote array indices to avoid them expanding as globs.",
    "description": "Quote array indices to avoid them expanding as globs."
  },
  {
    "patternId": "SC3001",
    "title": "In POSIX sh, process substitution is undefined.",
    "description": "In POSIX sh, process substitution is undefined."
  },
  {
    "patternId": "SC3002",
    "title": "In POSIX sh, extglob is undefined.",
    "description": "In POSIX sh, extglob is undefined."
  },
  {
    "patternId": "SC3003",
    "title": "In POSIX sh, `$'..'` is undefined.",
    "description": "In POSIX sh, `$'..'` is undefined."
  },
  {
    "patternId": "SC3004",
    "title": "In POSIX sh, $\"..\" is undefined",
    "description": "In POSIX sh, $\"..\" is undefined"
  },
  {
    "patternId": "SC3005",
    "title": "In POSIX sh, arithmetic for loops are undefined.",
    "description": "In POSIX sh, arithmetic for loops are undefined."
  },
  {
    "patternId": "SC3006",
    "title": "In POSIX sh, standalone `((..))` is undefined.",
    "description": "In POSIX sh, standalone `((..))` is undefined."
  },
  {
    "patternId": "SC3009",
    "title": "**In POSIX `sh`, brace expansion is undefined.**",
    "description": "**In POSIX `sh`, brace expansion is undefined.**"
  },
  {
    "patternId": "SC3010",
    "title": "In POSIX sh, `[[ ]]` is undefined.",
    "description": "In POSIX sh, `[[ ]]` is undefined."
  },
  {
    "patternId": "SC3012",
    "title": "In POSIX sh, lexicographical `\\<` is undefined.",
    "description": "In POSIX sh, lexicographical `\\<` is undefined."
  },
  {
    "patternId": "SC3013",
    "title": "In POSIX sh, `-nt` is undefined.",
    "description": "In POSIX sh, `-nt` is undefined."
  },
  {
    "patternId": "SC3014",
    "title": "In POSIX sh, `==` in place of `=` is undefined.",
    "description": "In POSIX sh, `==` in place of `=` is undefined."
  },
  {
    "patternId": "SC3015",
    "title": "In POSIX sh, `=~` regex matching is undefined.",
    "description": "In POSIX sh, `=~` regex matching is undefined."
  },
  {
    "patternId": "SC3017",
    "title": "In POSIX sh, unary `-a` in place of `-e` is undefined.",
    "description": "In POSIX sh, unary `-a` in place of `-e` is undefined."
  },
  {
    "patternId": "SC3018",
    "title": "In POSIX sh, `++` is undefined.",
    "description": "In POSIX sh, `++` is undefined."
  },
  {
    "patternId": "SC3019",
    "title": "In POSIX sh, exponentials are undefined.",
    "description": "In POSIX sh, exponentials are undefined."
  },
  {
    "patternId": "SC3020",
    "title": "In POSIX sh, `&>` is undefined.",
    "description": "In POSIX sh, `&>` is undefined."
  },
  {
    "patternId": "SC3021",
    "title": "In POSIX sh, `>&` is undefined.",
    "description": "In POSIX sh, `>&` is undefined."
  },
  {
    "patternId": "SC3022",
    "title": "In POSIX sh, named file descriptors is undefined.",
    "description": "In POSIX sh, named file descriptors is undefined."
  },
  {
    "patternId": "SC3023",
    "title": "In POSIX sh, FDs outside of 0-9 are undefined.",
    "description": "In POSIX sh, FDs outside of 0-9 are undefined."
  },
  {
    "patternId": "SC3024",
    "title": "In POSIX sh, `+=` is undefined.",
    "description": "In POSIX sh, `+=` is undefined."
  },
  {
    "patternId": "SC3025",
    "title": "In POSIX sh, `/dev/{tcp,udp}` is undefined.",
    "description": "In POSIX sh, `/dev/{tcp,udp}` is undefined."
  },
  {
    "patternId": "SC3026",
    "title": "In POSIX sh, `^` in place of `!` in glob bracket expressions is undefined.",
    "description": "In POSIX sh, `^` in place of `!` in glob bracket expressions is undefined."
  },
  {
    "patternId": "SC3028",
    "title": "In POSIX sh, VARIABLE is undefined.",
    "description": "In POSIX sh, VARIABLE is undefined."
  },
  {
    "patternId": "SC3030",
    "title": "In POSIX sh, arrays are undefined.",
    "description": "In POSIX sh, arrays are undefined."
  },
  {
    "patternId": "SC3031",
    "title": "In POSIX sh, redirecting from/to globs is undefined.",
    "description": "In POSIX sh, redirecting from/to globs is undefined."
  },
  {
    "patternId": "SC3034",
    "title": "In POSIX sh, `$(<file)` is undefined.",
    "description": "In POSIX sh, `$(<file)` is undefined."
  },
  {
    "patternId": "SC3035",
    "title": "In POSIX sh, `` `<file` `` is undefined.",
    "description": "In POSIX sh, `` `<file` `` is undefined."
  },
  {
    "patternId": "SC3037",
    "title": "In POSIX sh, echo flags are undefined.",
    "description": "In POSIX sh, echo flags are undefined."
  },
  {
    "patternId": "SC3038",
    "title": "In POSIX sh, exec flags are undefined.",
    "description": "In POSIX sh, exec flags are undefined."
  },
  {
    "patternId": "SC3039",
    "title": "In POSIX sh, `let` is undefined.",
    "description": "In POSIX sh, `let` is undefined."
  },
  {
    "patternId": "SC3040",
    "title": "In POSIX sh, set option *[name]* is undefined.",
    "description": "In POSIX sh, set option *[name]* is undefined."
  },
  {
    "patternId": "SC3043",
    "title": "In POSIX sh, `local` is undefined.",
    "description": "In POSIX sh, `local` is undefined."
  },
  {
    "patternId": "SC3044",
    "title": "In POSIX sh, `declare` is undefined.",
    "description": "In POSIX sh, `declare` is undefined."
  },
  {
    "patternId": "SC3045",
    "title": "In POSIX sh, some-command-with-flag is undefined.",
    "description": "In POSIX sh, some-command-with-flag is undefined."
  },
  {
    "patternId": "SC3046",
    "title": "In POSIX sh, `source` in place of `.` is undefined.",
    "description": "In POSIX sh, `source` in place of `.` is undefined."
  },
  {
    "patternId": "SC3047",
    "title": "In POSIX sh, trapping ERR is undefined.",
    "description": "In POSIX sh, trapping ERR is undefined."
  },
  {
    "patternId": "SC3048",
    "title": "In POSIX sh, prefixing signal names with 'SIG' is undefined.",
    "description": "In POSIX sh, prefixing signal names with 'SIG' is undefined."
  },
  {
    "patternId": "SC3049",
    "title": "In POSIX sh, using lower/mixed case for signal names is undefined.",
    "description": "In POSIX sh, using lower/mixed case for signal names is undefined."
  },
  {
    "patternId": "SC3050",
    "title": "In POSIX sh, `printf %q` is undefined.",
    "description": "In POSIX sh, `printf %q` is undefined."
  },
  {
    "patternId": "SC3053",
    "title": "In POSIX sh, indirect expansion is undefined.",
    "description": "In POSIX sh, indirect expansion is undefined."
  },
  {
    "patternId": "SC3054",
    "title": "In POSIX sh, array references are undefined.",
    "description": "In POSIX sh, array references are undefined."
  },
  {
    "patternId": "SC3055",
    "title": "In POSIX sh, array key expansion is undefined.",
    "description": "In POSIX sh, array key expansion is undefined."
  },
  {
    "patternId": "SC3056",
    "title": "In POSIX sh, name matching prefixes are undefined.",
    "description": "In POSIX sh, name matching prefixes are undefined."
  },
  {
    "patternId": "SC3057",
    "title": "In POSIX sh, string indexing is undefined.",
    "description": "In POSIX sh, string indexing is undefined."
  },
  {
    "patternId": "SC3059",
    "title": "Case modification is not supported in dash and undefined in POSIX sh.",
    "description": "Case modification is not supported in dash and undefined in POSIX sh."
  },
  {
    "patternId": "SC3060",
    "title": "In POSIX sh, string replacement is undefined.",
    "description": "In POSIX sh, string replacement is undefined."
  }
]
